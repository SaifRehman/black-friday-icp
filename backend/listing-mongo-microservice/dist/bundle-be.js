!function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!w[e]||!b[e])return;for(var r in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(h[r]=t[r]);0==--m&&0===v&&O()}(t.id,t.modules)}var r,n=!0,o="1f115b74c7716084c4da",i={},s=[],c=[];function d(e){var t=_[e];if(!t)return P;var n=function(n){return t.hot.active?(_[n]?-1===_[n].parents.indexOf(e)&&_[n].parents.push(e):(s=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),s=[]),P(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return P[e]},set:function(t){P[e]=t}}};for(var i in P)Object.prototype.hasOwnProperty.call(P,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===p&&l("prepare"),v++,P.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(g[e]||x(e),0===v&&0===m&&O())}},n.t=function(e,t){return 1&t&&(e=n(e)),P.t(e,-2&t)},n}function a(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:j,apply:D,status:function(e){if(!e)return p;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:i[e]};return r=void 0,t}var u=[],p="idle";function l(e){p=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var f,h,y,m=0,v=0,g={},b={},w={};function I(e){return+e+""===e?+e:e}function j(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return n=e,l("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return l("idle"),null;b={},g={},w=e.c,y=e.h,l("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return x(0),"prepare"===p&&0===v&&0===m&&O(),t})}function x(e){w[e]?(b[e]=!0,m++,t(e)):g[e]=!0}function O(){l("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return D(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&t.push(I(r));e.resolve(t)}}function D(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var r,n,c,d,a;function u(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((d=_[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var c=0;c<d.parents.length;c++){var a=d.parents[c],u=_[a];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([a]),moduleId:i,parentId:a};-1===t.indexOf(a)&&(u.hot._acceptedDependencies[i]?(r[a]||(r[a]=[]),f(r[a],[i])):(delete r[a],t.push(a),n.push({chain:s.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var m={},v=[],g={},b=function(){console.warn("[HMR] unexpected require("+x.moduleId+") to disposed module")};for(var j in h)if(Object.prototype.hasOwnProperty.call(h,j)){var x;a=I(j);var O=!1,D=!1,E=!1,H="";switch((x=h[j]?u(a):{type:"disposed",moduleId:j}).chain&&(H="\nUpdate propagation: "+x.chain.join(" -> ")),x.type){case"self-declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(O=new Error("Aborted because of self decline: "+x.moduleId+H));break;case"declined":t.onDeclined&&t.onDeclined(x),t.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+x.moduleId+" in "+x.parentId+H));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(x),t.ignoreUnaccepted||(O=new Error("Aborted because "+a+" is not accepted"+H));break;case"accepted":t.onAccepted&&t.onAccepted(x),D=!0;break;case"disposed":t.onDisposed&&t.onDisposed(x),E=!0;break;default:throw new Error("Unexception type "+x.type)}if(O)return l("abort"),Promise.reject(O);if(D)for(a in g[a]=h[a],f(v,x.outdatedModules),x.outdatedDependencies)Object.prototype.hasOwnProperty.call(x.outdatedDependencies,a)&&(m[a]||(m[a]=[]),f(m[a],x.outdatedDependencies[a]));E&&(f(v,[x.moduleId]),g[a]=b)}var A,C=[];for(n=0;n<v.length;n++)a=v[n],_[a]&&_[a].hot._selfAccepted&&C.push({module:a,errorHandler:_[a].hot._selfAccepted});l("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var S,k,q=v.slice();q.length>0;)if(a=q.pop(),d=_[a]){var U={},M=d.hot._disposeHandlers;for(c=0;c<M.length;c++)(r=M[c])(U);for(i[a]=U,d.hot.active=!1,delete _[a],delete m[a],c=0;c<d.children.length;c++){var T=_[d.children[c]];T&&((A=T.parents.indexOf(a))>=0&&T.parents.splice(A,1))}}for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(d=_[a]))for(k=m[a],c=0;c<k.length;c++)S=k[c],(A=d.children.indexOf(S))>=0&&d.children.splice(A,1);for(a in l("apply"),o=y,g)Object.prototype.hasOwnProperty.call(g,a)&&(e[a]=g[a]);var N=null;for(a in m)if(Object.prototype.hasOwnProperty.call(m,a)&&(d=_[a])){k=m[a];var z=[];for(n=0;n<k.length;n++)if(S=k[n],r=d.hot._acceptedDependencies[S]){if(-1!==z.indexOf(r))continue;z.push(r)}for(n=0;n<z.length;n++){r=z[n];try{r(k)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:a,dependencyId:k[n],error:e}),t.ignoreErrored||N||(N=e)}}}for(n=0;n<C.length;n++){var R=C[n];a=R.module,s=[a];try{P(a)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:r,originalError:e}),t.ignoreErrored||N||(N=r),N||(N=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:a,error:e}),t.ignoreErrored||N||(N=e)}}return N?(l("fail"),Promise.reject(N)):(l("idle"),new Promise(function(e){e(v)}))}var _={};function P(t){if(_[t])return _[t].exports;var r=_[t]={i:t,l:!1,exports:{},hot:a(t),parents:(c=s,s=[],c),children:[],hot:a(t),parents:(c=s,s=[],c),children:[]};return e[t].call(r.exports,r,r.exports,d(t)),r.l=!0,r.exports}P.m=e,P.c=_,P.d=function(e,t,r){P.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},P.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},P.t=function(e,t){if(1&t&&(e=P(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(P.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)P.d(r,n,function(t){return e[t]}.bind(null,n));return r},P.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return P.d(t,"a",t),t},P.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},P.p="/Users/saifurrehman/Desktop/black-friday-icp/backend/listing-mongo-microservice/dist",P.h=function(){return o},P.h=function(){return o},d(6)(P.s=6)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express-session")},function(e,t,r){r(7),e.exports=r(9)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t){e.exports=require("reflect-metadata")},function(e,t,r){"use strict";r.r(t);var n=r(4),o=r.n(n),i=r(2),s=r.n(i),c=r(1),d=r.n(c),a=r(3),u=r.n(a),p=r(5),l=r.n(p),f=r(0),h=new(0,f.Schema)({Name:{type:String},Image:{type:String},Price:{type:String}}),y=f.model("Flight",h),m=function(){function e(){}return e.prototype.addNewItem=function(e,t){t.setHeader("Content-Type","application/json"),new y(e.body).save(function(e,r){e?t.status(404).json({err:e}):t.json(r)})},e.prototype.getItem=function(e,t){t.setHeader("Content-Type","application/json"),y.find({},function(e,r){e?t.status(404).json({err:e}):t.status(200).send(r)})},e.prototype.getItemById=function(e,t){t.setHeader("Content-Type","application/json"),y.findById(e.params.ID,function(e,r){e?t.status(404).json({err:e}):t.status(200).send(r)})},e.prototype.updateItem=function(e,t){t.setHeader("Content-Type","application/json"),y.findOneAndUpdate({_id:e.params.ID},e.body,{new:!0},function(e,r){e?t.status(404).json({err:e}):t.json(r)})},e.prototype.deleteItem=function(e,t){t.setHeader("Content-Type","application/json"),y.deleteOne({_id:e.params.ID},function(e){e?t.status(404).json({err:e}):t.json({message:"success"})})},e}(),v=(r(8),(new(function(){function e(){this.itemController=new m,this.router=Object(c.Router)(),this.routes()}return e.prototype.routes=function(){this.router.get("/healthz",function(e,t){t.status(200).send("healthz")}),this.router.get("/listItems",function(e,t,r){r()},this.itemController.getItem),this.router.post("/listItems",function(e,t,r){r()},this.itemController.addNewItem),this.router.get("/listItems/:ID",function(e,t,r){r()},this.itemController.getItemById),this.router.put("/listItems/:ID",function(e,t,r){r()},this.itemController.updateItem),this.router.delete("/listItems/:ID",function(e,t,r){r()},this.itemController.deleteItem)},e}())).router),g=r(0);g.Promise=Promise;var b=(new(function(){function e(){this.mongoUrl="mongodb://localhost:27017/items",this.express=d()(),this.middleware(),this.routes(),this.mongoSetup()}return e.prototype.mongoSetup=function(){g.Promise=global.Promise,g.connect(this.mongoUrl)},e.prototype.middleware=function(){this.express.use(function(e,t,r){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","*"),r()}),this.express.use(u.a.json()),this.express.use(u.a.urlencoded({extended:!1})),this.express.use(l()({secret:"test123",saveUninitialized:!1,resave:!0}))},e.prototype.routes=function(){this.express.get("/",function(e,t){t.send("hi")}),this.express.use("/",v)},e}())).express;s()("ts-express:server"),new(function(){return function(){var e=this;this.normalizePort=function(e){var t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t},this.onError=function(t){if("listen"!==t.syscall)throw t;var r="string"==typeof e.port?"Pipe "+e.port:"Port "+e.port;switch(t.code){case"EACCES":console.error(r+" requires elevated privileges"),process.exit(1);break;case"EADDRINUSE":console.error(r+" is already in use"),process.exit(1);break;default:throw t}},this.onListening=function(){console.log("listening on "+e.port);var t=e.server.address(),r="string"==typeof t?"pipe "+t:"port "+t.port;s()("Listening on "+r)},this.port=this.normalizePort(process.env.port||7e3),b.set("port",this.port),this.server=o.a.createServer(b),this.server.listen(this.port),this.server.on("error",this.onError),this.server.on("listening",this.onListening)}}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9uZ29vc2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZGVidWdcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJib2R5LXBhcnNlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzLXNlc3Npb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYmFiZWwvcG9seWZpbGxcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWZsZWN0LW1ldGFkYXRhXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL2xpc3RpbmcvbGliL21vZGVscy9jcm1Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvbGlzdGluZy9saWIvY29udHJvbGxlcnMvY3JtQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvbGlzdGluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJob3REb3dubG9hZFVwZGF0ZUNodW5rIiwiY2h1bmtJZCIsImNodW5rIiwicmVxdWlyZSIsImhvdEN1cnJlbnRIYXNoIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaWQiLCJtb2R1bGVzIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX21haW4iLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImkiLCJsZW5ndGgiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJjaGVjayIsImhvdENoZWNrIiwiYXBwbHkiLCJob3RBcHBseSIsInN0YXR1cyIsImwiLCJob3RTdGF0dXNIYW5kbGVycyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiZGF0YSIsIm5ld1N0YXR1cyIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJFcnJvciIsInVwZGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImMiLCJoIiwicHJvbWlzZSIsInJlamVjdCIsImRlZmVycmVkIiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwidHlwZSIsInBhcmVudElkIiwicGFyZW50IiwiY29uY2F0IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJqb2luIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiZXJyb3JIYW5kbGVyIiwia2V5cyIsImZvckVhY2giLCJpbnN0YWxsZWRDaHVua3MiLCJob3REaXNwb3NlQ2h1bmsiLCJkZXBlbmRlbmN5IiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsIm0iLCJkIiwiZ2V0dGVyIiwibyIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwicyIsIkl0ZW1TY2hlbWEiLCJTY2hlbWEiLCJleHRlcm5hbF9tb25nb29zZV8iLCJOYW1lIiwiU3RyaW5nIiwiSW1hZ2UiLCJQcmljZSIsIkl0ZW0iLCJJdGVtQ29udHJvbGxlciIsImFkZE5ld0l0ZW0iLCJyZXEiLCJyZXMiLCJzZXRIZWFkZXIiLCJib2R5Iiwic2F2ZSIsImZsaWdodCIsImpzb24iLCJnZXRJdGVtIiwiZmluZCIsInNlbmQiLCJnZXRJdGVtQnlJZCIsImZpbmRCeUlkIiwicGFyYW1zIiwiSUQiLCJ1cGRhdGVJdGVtIiwiZmluZE9uZUFuZFVwZGF0ZSIsIl9pZCIsIm5ldyIsImRlbGV0ZUl0ZW0iLCJkZWxldGVPbmUiLCJtZXNzYWdlIiwibGlzdGluZyIsIkxpc3RpbmdNb25nb0NvbnRyb2xsZXIiLCJ0aGlzIiwiaXRlbUNvbnRyb2xsZXIiLCJyb3V0ZXIiLCJleHRlcm5hbF9leHByZXNzXyIsInJvdXRlcyIsIl8iLCJuZXh0IiwicG9zdCIsInB1dCIsImRlbGV0ZSIsIm1vbmdvb3NlIiwic2VydmVyIiwiQXBwIiwibW9uZ29VcmwiLCJleHByZXNzIiwiZXh0ZXJuYWxfZXhwcmVzc19kZWZhdWx0IiwibWlkZGxld2FyZSIsIm1vbmdvU2V0dXAiLCJnbG9iYWwiLCJjb25uZWN0IiwidXNlIiwiaGVhZGVyIiwiZXh0ZXJuYWxfYm9keV9wYXJzZXJfZGVmYXVsdCIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImV4dGVybmFsX2V4cHJlc3Nfc2Vzc2lvbl9kZWZhdWx0Iiwic2VjcmV0Iiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJyZXNhdmUiLCJleHRlcm5hbF9kZWJ1Z19kZWZhdWx0IiwiX3RoaXMiLCJub3JtYWxpemVQb3J0IiwidmFsIiwicG9ydCIsInBhcnNlSW50IiwiaXNOYU4iLCJvbkVycm9yIiwic3lzY2FsbCIsImNvZGUiLCJwcm9jZXNzIiwiZXhpdCIsIm9uTGlzdGVuaW5nIiwibG9nIiwiYWRkciIsImFkZHJlc3MiLCJlbnYiLCJleHRlcm5hbF9odHRwX2RlZmF1bHQiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJv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Q0EsSUFBQUMsRUFBQSxpQkFBQUQsRUFBQUUsU0FBQUYsRUFBQSxJQUFBQSxFQUNBLE9BQUFHLE1BQUFGLEdBQ0FELEVBQ0FDLEdBQUEsR0FDQUEsR0FJQWpDLEtBQUFvQyxRQUFBLFNBQUE5RixHQUNBLGNBQUFBLEVBQUErRixRQUNBLE1BQUEvRixFQUNBLElBQUFtQixFQUFBLGlCQUFBcUUsRUFBQUcsS0FBQSxRQUFBSCxFQUFBRyxLQUFBLFFBQUFILEVBQUFHLEtBQ0EsT0FBQTNGLEVBQUFnRyxNQUNBLGFBQ0E3TSxRQUFBNkcsTUFBQW1CLEVBQUEsaUNBQ0E4RSxRQUFBQyxLQUFBLEdBQ0EsTUFDQSxpQkFDQS9NLFFBQUE2RyxNQUFBbUIsRUFBQSxzQkFDQThFLFFBQUFDLEtBQUEsR0FDQSxNQUNBLFFBQ0EsTUFBQWxHLElBR0EwRCxLQUFBeUMsWUFBQSxXQUNBaE4sUUFBQWlOLElBQUEsZ0JBQUFaLEVBQUFHLE1BQ0EsSUFBQVUsRUFBQWIsRUFBQW5CLE9BQUFpQyxVQUNBbkYsRUFBQSxpQkFBQWtGLEVBQUEsUUFBQUEsRUFBQSxRQUFBQSxFQUFBVixLQUNZSixJQUFLLGdCQUFBcEUsSUFFakJ1QyxLQUFBaUMsS0FBQWpDLEtBQUErQixjQUFBUSxRQUFBTSxJQUFBWixNQUFBLEtBQ1F0QixFQUFHM0ssSUFBQSxPQUFBZ0ssS0FBQWlDLE1BQ1hqQyxLQUFBVyxPQUFzQm1DLEVBQUFsSSxFQUFJbUksYUFBY3BDLEdBQ3hDWCxLQUFBVyxPQUFBcUMsT0FBQWhELEtBQUFpQyxNQUNBakMsS0FBQVcsT0FBQXNDLEdBQUEsUUFBQWpELEtBQUFvQyxTQUNBcEMsS0FBQVcsT0FBQXNDLEdBQUEsWUFBQWpELEtBQUF5QyxjQXhDYyIsImZpbGUiOiJidW5kbGUtYmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgY2h1bmsgPSByZXF1aXJlKFwiLi9cIiArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIik7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rLmlkLCBjaHVuay5tb2R1bGVzKTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KCkge1xuIFx0XHR0cnkge1xuIFx0XHRcdHZhciB1cGRhdGUgPSByZXF1aXJlKFwiLi9cIiArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiKTtcbiBcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVwZGF0ZSk7XG4gXHR9XG5cbiBcdC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiMWYxMTViNzRjNzcxNjA4NGM0ZGFcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvVXNlcnMvc2FpZnVycmVobWFuL0Rlc2t0b3AvYmxhY2stZnJpZGF5LWljcC9iYWNrZW5kL2xpc3RpbmctbW9uZ28tbWljcm9zZXJ2aWNlL2Rpc3RcIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDYpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib2R5LXBhcnNlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV4cHJlc3Mtc2Vzc2lvblwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJAYmFiZWwvcG9seWZpbGxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVmbGVjdC1tZXRhZGF0YVwiKTsiLCJpbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XG52YXIgU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hO1xuZXhwb3J0IHZhciBJdGVtU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgTmFtZToge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIEltYWdlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgUHJpY2U6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgfVxufSk7XG4iLCJpbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IEl0ZW1TY2hlbWEgfSBmcm9tIFwiLi4vbW9kZWxzL2NybU1vZGVsXCI7XG52YXIgSXRlbSA9IG1vbmdvb3NlLm1vZGVsKFwiRmxpZ2h0XCIsIEl0ZW1TY2hlbWEpO1xudmFyIEl0ZW1Db250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEl0ZW1Db250cm9sbGVyKCkge1xuICAgIH1cbiAgICBJdGVtQ29udHJvbGxlci5wcm90b3R5cGUuYWRkTmV3SXRlbSA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICB2YXIgbmV3RmxpZ2h0ID0gbmV3IEl0ZW0ocmVxLmJvZHkpO1xuICAgICAgICBuZXdGbGlnaHQuc2F2ZShmdW5jdGlvbiAoZXJyLCBmbGlnaHQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycjogZXJyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5qc29uKGZsaWdodCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgSXRlbS5maW5kKHt9LCBmdW5jdGlvbiAoZXJyLCBmbGlnaHQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycjogZXJyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGZsaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmdldEl0ZW1CeUlkID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIEl0ZW0uZmluZEJ5SWQocmVxLnBhcmFtcy5JRCwgZnVuY3Rpb24gKGVyciwgZmxpZ2h0KSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnI6IGVyciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChmbGlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVJdGVtID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIEl0ZW0uZmluZE9uZUFuZFVwZGF0ZSh7IF9pZDogcmVxLnBhcmFtcy5JRCB9LCByZXEuYm9keSwgeyBuZXc6IHRydWUgfSwgZnVuY3Rpb24gKGVyciwgZmxpZ2h0KSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnI6IGVyciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuanNvbihmbGlnaHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5kZWxldGVJdGVtID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgIEl0ZW0uZGVsZXRlT25lKHsgX2lkOiByZXEucGFyYW1zLklEIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycjogZXJyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5qc29uKHsgbWVzc2FnZTogXCJzdWNjZXNzXCIgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEl0ZW1Db250cm9sbGVyO1xufSgpKTtcbmV4cG9ydCB7IEl0ZW1Db250cm9sbGVyIH07XG4iLCJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgSXRlbUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vbGlzdGluZy9saWIvY29udHJvbGxlcnMvY3JtQ29udHJvbGxlclwiO1xuaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xudmFyIExpc3RpbmdNb25nb0NvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlzdGluZ01vbmdvQ29udHJvbGxlcigpIHtcbiAgICAgICAgdGhpcy5pdGVtQ29udHJvbGxlciA9IG5ldyBJdGVtQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLnJvdXRlciA9IFJvdXRlcigpO1xuICAgICAgICB0aGlzLnJvdXRlcygpO1xuICAgIH1cbiAgICBMaXN0aW5nTW9uZ29Db250cm9sbGVyLnByb3RvdHlwZS5yb3V0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucm91dGVyLmdldChcIi9oZWFsdGh6XCIsIGZ1bmN0aW9uIChfLCByZXMpIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKFwiaGVhbHRoelwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucm91dGVyLmdldChcIi9saXN0SXRlbXNcIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuaXRlbUNvbnRyb2xsZXIuZ2V0SXRlbSk7XG4gICAgICAgIHRoaXMucm91dGVyLnBvc3QoXCIvbGlzdEl0ZW1zXCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LCB0aGlzLml0ZW1Db250cm9sbGVyLmFkZE5ld0l0ZW0pO1xuICAgICAgICB0aGlzLnJvdXRlci5nZXQoXCIvbGlzdEl0ZW1zLzpJRFwiLCBmdW5jdGlvbiAoXywgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuaXRlbUNvbnRyb2xsZXIuZ2V0SXRlbUJ5SWQpO1xuICAgICAgICB0aGlzLnJvdXRlci5wdXQoXCIvbGlzdEl0ZW1zLzpJRFwiLCBmdW5jdGlvbiAoXywgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuaXRlbUNvbnRyb2xsZXIudXBkYXRlSXRlbSk7XG4gICAgICAgIHRoaXMucm91dGVyLmRlbGV0ZShcIi9saXN0SXRlbXMvOklEXCIsIGZ1bmN0aW9uIChfLCByZXMsIG5leHQpIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSwgdGhpcy5pdGVtQ29udHJvbGxlci5kZWxldGVJdGVtKTtcbiAgICB9O1xuICAgIHJldHVybiBMaXN0aW5nTW9uZ29Db250cm9sbGVyO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IG5ldyBMaXN0aW5nTW9uZ29Db250cm9sbGVyKCkucm91dGVyO1xuIiwiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgc2Vzc2lvbiBmcm9tICdleHByZXNzLXNlc3Npb24nO1xuaW1wb3J0IExpc3RpbmdNb25nb0NvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9saXN0aW5nL2luZGV4JztcbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5tb25nb29zZS5Qcm9taXNlID0gUHJvbWlzZTtcbnZhciBBcHAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXBwKCkge1xuICAgICAgICB0aGlzLm1vbmdvVXJsID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcvaXRlbXMnO1xuICAgICAgICB0aGlzLmV4cHJlc3MgPSBleHByZXNzKCk7XG4gICAgICAgIHRoaXMubWlkZGxld2FyZSgpO1xuICAgICAgICB0aGlzLnJvdXRlcygpO1xuICAgICAgICB0aGlzLm1vbmdvU2V0dXAoKTtcbiAgICB9XG4gICAgQXBwLnByb3RvdHlwZS5tb25nb1NldHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBtb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4gICAgICAgIG1vbmdvb3NlLmNvbm5lY3QodGhpcy5tb25nb1VybCk7XG4gICAgfTtcbiAgICBBcHAucHJvdG90eXBlLm1pZGRsZXdhcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2UoZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICAgICAgICAgICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICcqJyk7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmV4cHJlc3MudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuICAgICAgICB0aGlzLmV4cHJlc3MudXNlKHNlc3Npb24oeyBzZWNyZXQ6ICd0ZXN0MTIzJywgc2F2ZVVuaW5pdGlhbGl6ZWQ6IGZhbHNlLCByZXNhdmU6IHRydWUgfSkpO1xuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5yb3V0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXhwcmVzcy5nZXQoJy8nLCBmdW5jdGlvbiAoXywgcmVzKSB7XG4gICAgICAgICAgICByZXMuc2VuZCgnaGknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2UoJy8nLCBMaXN0aW5nTW9uZ29Db250cm9sbGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBBcHA7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgbmV3IEFwcCgpLmV4cHJlc3M7XG4iLCJpbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vc2VydmVyJztcbmRlYnVnKCd0cy1leHByZXNzOnNlcnZlcicpO1xudmFyIEluaXRTZXJ2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW5pdFNlcnZlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5ub3JtYWxpemVQb3J0ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgdmFyIHBvcnQgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHBhcnNlSW50KHZhbCwgMTApIDogdmFsO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHBvcnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICBlbHNlIGlmIChwb3J0ID49IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5zeXNjYWxsICE9PSAnbGlzdGVuJylcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIHZhciBiaW5kID0gdHlwZW9mIF90aGlzLnBvcnQgPT09ICdzdHJpbmcnID8gJ1BpcGUgJyArIF90aGlzLnBvcnQgOiAnUG9ydCAnICsgX3RoaXMucG9ydDtcbiAgICAgICAgICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VBQ0NFUyc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArIFwiIHJlcXVpcmVzIGVsZXZhdGVkIHByaXZpbGVnZXNcIik7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRUFERFJJTlVTRSc6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArIFwiIGlzIGFscmVhZHkgaW4gdXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uTGlzdGVuaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJsaXN0ZW5pbmcgb24gXCIgKyBfdGhpcy5wb3J0KTtcbiAgICAgICAgICAgIHZhciBhZGRyID0gX3RoaXMuc2VydmVyLmFkZHJlc3MoKTtcbiAgICAgICAgICAgIHZhciBiaW5kID0gdHlwZW9mIGFkZHIgPT09ICdzdHJpbmcnID8gXCJwaXBlIFwiICsgYWRkciA6IFwicG9ydCBcIiArIGFkZHIucG9ydDtcbiAgICAgICAgICAgIGRlYnVnKFwiTGlzdGVuaW5nIG9uIFwiICsgYmluZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucG9ydCA9IHRoaXMubm9ybWFsaXplUG9ydChwcm9jZXNzLmVudi5wb3J0IHx8IDcwMDApO1xuICAgICAgICBBcHAuc2V0KCdwb3J0JywgdGhpcy5wb3J0KTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihBcHApO1xuICAgICAgICB0aGlzLnNlcnZlci5saXN0ZW4odGhpcy5wb3J0KTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIub24oJ2Vycm9yJywgdGhpcy5vbkVycm9yKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIub24oJ2xpc3RlbmluZycsIHRoaXMub25MaXN0ZW5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gSW5pdFNlcnZlcjtcbn0oKSk7XG5uZXcgSW5pdFNlcnZlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==